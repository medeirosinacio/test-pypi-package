name: Publish ${package_name} to PyPI / GitHub

on:
  release:
    types:
      - 'published'
    tags:
      - '*.*.*'

jobs:
  commit-new-release:
    name: Commit new release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.BOT_STEFANZWEIFEL_GIT_AUTO_COMMIT_ACTION }}

      - name: Check for duplicate release commit
        id: check_commit
        run: |
          if git log --format='%H' --perl-regexp --grep="^release ${{ github.event.release.tag_name }}$" HEAD | grep -q . || false; then
            echo "Release commit already exists."
            exit 0  # Exit with success to continue with other jobs
          else
            echo "No existing release commit found."
            exit 1  # Exit with failure to skip subsequent steps in this job
          fi

      - name: Write CHANGELOG
        if: steps.check_commit.outcome == 'success'
        run: |
          { printf "### Release ${{ github.event.release.tag_name }} \n\n${{ github.event.release.body }}\n\n"; cat CHANGELOG.md; } > tmp.txt && mv tmp.txt CHANGELOG.md

      - name: Write version in setup.py
        if: steps.check_commit.outcome == 'success'
        run: |
          sed -i "s/version='.*'/version='${{ github.event.release.tag_name }}'/g" setup.py

      - name: Commit and push new release
        if: steps.check_commit.outcome == 'success'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: release ${{ github.event.release.tag_name }}

      - name: Create and push backup branch
        if: steps.check_commit.outcome == 'success'
        run: |
          backup_branch="release/${{ github.event.release.tag_name }}"
          git checkout -b "$backup_branch"
          git push origin "$backup_branch"

  build-n-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    needs: commit-new-release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: release/${{ github.event.release.tag_name }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Build source and wheel distributions
        run: |
          python -m pip install --upgrade build twine
          python -m build
          twine check --strict dist/*
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
